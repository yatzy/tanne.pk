, target.lang = target.lang )
return(res)
}
translate_fi_en('saksa')
market_table
etf
etf$market = translate_fi_en(etf$Markkina)
etf
View(market_table)
library(stringDist)
install.packages('stringdist')
library(stringdist)
View(market_table)
colnames(market_table)
stringdist(etf$market , market_table$'Yahoo! Finance Symbol')
stringdistmatrix(etf$market , market_table$'Yahoo! Finance Symbol')
dim(etf)
dim(market_table)
etf$market[17]
stringdist("ca","abc")
stringdist("ABC","abc")
stringdist("ca","abc",method="dl")
stringdist(tolower("ABC"),"abc")
etf$market
etf$market
View(market_table)
stringdist(tolower(etf$market) , tolower(market_table$Country) )
asdfasd
sadf
sdfc
stringdistmatrix(tolower(etf$market) , tolower(market_table$Country) )
countries_market_table = unique(tolower(market_table$Country))
countries_market_table = unique(tolower(market_table$Country))asdf
asd
countries_etf_table = unique(tolower(etf$market))
stringdistmatrix(countries_etf_table , countries_market_table)
stringdistmatrix(countries_market_table , countries_etf_table )
sapply(dist, min)
dist_mat = data.frame(stringdistmatrix(countries_market_table , countries_etf_table ))
sapply(dist, min)
dist_mat = stringdistmatrix(countries_market_table , countries_etf_table )
sapply(dist_mat, min)
dist_mat = stringdistmatrix(countries_market_table , countries_etf_table )
dist_mat
apply(dist_mat, 1 , function(x) which(min(x)))
apply(dist_mat, 1 , min )
apply(dist_mat, 2 , min )
countries_etf_table
colMins(dist_mat)
apply(dist_mat, 2 , function(x) which(x) == min(x) )
apply(dist_mat, 2 , function(x) {
which(x) == min(x)
})
apply(dist_mat, 2 , function(x) {
which(x == min(x))
})
countries_market_table
min_ind = apply(dist_mat, 2 , function(x) {
which(x == min(x))
})
countries_market_table[min_ind]
View(market_table)
fill_with_previous = function(vec){
for( i in 1:length(vec)){
if( vec[i] == '' ){
vec[i] = vec[i-1]
}
}
return(vec)
}
View(market_table)
fill_with_previous(market_table$Country)
install.packages(c("curl", "R6", "scales"))
min_ind = apply(dist_mat, 2 , which.min)
min_ind
countries_market_table[min_ind]
dist_mat
countries_etf_table
countries_market_table
countries_market_table[min_ind]
best_countries = countries_market_table[min_ind]
best_countries
country
country = 'germany'
lapply(best_countries , function(country){
res = market_table$'Yahoo! Finance Symbol'[ tolower(market_table$Country) == country ]
return(res)
})
market_table$'Yahoo! Finance Symbol'
tolower(market_table$Country)
market_table$Country = fill_with_previous(market_table$Country)
tolower(market_table$Country)
lapply(best_countries , function(country){
res = market_table$'Yahoo! Finance Symbol'[ tolower(market_table$Country) == country ]
return(res)
})
best_countries
'sweden' %in% tolower(market_table$Country)
best_countries
tolower(market_table$Country) == country
View(market_table)
View(etf)
ticker_suffixes = lapply(best_countries , function(country){
res = market_table$'Yahoo! Finance Symbol'[ tolower(market_table$Country) == country ]
return(res)
})
names(ticker_suffixes)
names(ticker_suffixes) = best_countries
names(ticker_suffixes)
ticker_suffixes
res = market_table$'Yahoo! Finance Symbol'[ tolower(market_table$Country) == country ]
res
res == ''
ticker_suffixes = lapply(best_countries , function(country){
res = market_table$'Yahoo! Finance Symbol'[ tolower(market_table$Country) == country ]
legit_ind = res != ''
res = res[legit_ind]
return(res)
})
names(ticker_suffixes) = best_countries
ticker_suffixes
countries_etf_table
find_ticker_suffixes = function(vec){
countries_market_table = unique(tolower(market_table$Country))
countries_etf_table = unique(tolower(etf$market))
dist_mat = stringdistmatrix(countries_market_table , countries_etf_table )
min_ind_market_table = apply(dist_mat, 2 , which.min)
best_countries = countries_market_table[min_ind]
ticker_suffixes = lapply(best_countries , function(country){
res = market_table$'Yahoo! Finance Symbol'[ tolower(market_table$Country) == country ]
legit_ind = res != ''
res = res[legit_ind]
return(res)
})
names(ticker_suffixes) = countries_etf_table
return(ticker_suffixes)
}
find_ticker_suffixes = function(vec = etf$market){
countries_market_table = unique(tolower(market_table$Country))
countries_etf_table = unique(tolower(vec))
dist_mat = stringdistmatrix(countries_market_table , countries_etf_table )
min_ind_market_table = apply(dist_mat, 2 , which.min)
best_countries = countries_market_table[min_ind]
ticker_suffixes = lapply(best_countries , function(country){
res = market_table$'Yahoo! Finance Symbol'[ tolower(market_table$Country) == country ]
legit_ind = res != ''
res = res[legit_ind]
return(res)
})
names(ticker_suffixes) = countries_etf_table
return(ticker_suffixes)
}
ticker_suffixes = find_ticker_suffixes()
ticker_suffixes
etf$market
countries_market_table = unique(tolower(market_table$Country))
countries_market_table
countries_etf_table = unique(tolower(etf$market))
countries_etf_table
dist_mat = stringdistmatrix(countries_market_table , countries_etf_table )
min_ind_market_table = apply(dist_mat, 2 , which.min)
best_countries = countries_market_table[min_ind]
ticker_suffixes = lapply(best_countries , function(country){
res = market_table$'Yahoo! Finance Symbol'[ tolower(market_table$Country) == country ]
legit_ind = res != ''
res = res[legit_ind]
return(res)
})
ticker_suffixes
names(ticker_suffixes) = countries_etf_table
ticker_suffixes
etf$market
etf$market
etf
etf$market
ticker_suffixes = find_ticker_suffixes(etf$market)
ticker_suffixes
countries_market_table = unique(tolower(market_table$Country))
countries_etf_table = unique(tolower(etf_vec))
dist_mat = stringdistmatrix(countries_market_table , countries_etf_table )
min_ind_market_table = apply(dist_mat, 2 , which.min)
etf_vec = etf$market
countries_market_table = unique(tolower(market_table$Country))
countries_etf_table = unique(tolower(etf_vec))
dist_mat = stringdistmatrix(countries_market_table , countries_etf_table )
min_ind_market_table = apply(dist_mat, 2 , which.min)
best_countries = countries_market_table[min_ind]
best_countries
countries_etf_table
dist_mat = stringdistmatrix(countries_market_table , countries_etf_table )
dist_mat
min_ind_market_table = apply(dist_mat, 2 , which.min)
min_ind_market_table
countries_market_table[min_ind]
countries_market_table
countries_market_table = unique(tolower(market_table$Country))
countries_etf_table = unique(tolower(etf_vec))
dist_mat = stringdistmatrix(countries_market_table , countries_etf_table )
min_ind_market_table = apply(dist_mat, 2 , which.min)
best_countries = countries_market_table[min_ind]
best_countries
countries_market_table
min_ind
dist_mat
countries_market_table = unique(tolower(market_table$Country))
countries_etf_table = unique(tolower(etf_vec))
dist_mat = stringdistmatrix(countries_market_table , countries_etf_table )
min_ind_market_table = apply(dist_mat, 2 , which.min)
best_countries = countries_market_table[min_ind_market_table]
ticker_suffixes = lapply(best_countries , function(country){
res = market_table$'Yahoo! Finance Symbol'[ tolower(market_table$Country) == country ]
legit_ind = res != ''
res = res[legit_ind]
return(res)
})
names(ticker_suffixes) = countries_etf_table
return(ticker_suffixes)
countries_market_table = unique(tolower(market_table$Country))
countries_etf_table = unique(tolower(etf_vec))
dist_mat = stringdistmatrix(countries_market_table , countries_etf_table )
min_ind_market_table = apply(dist_mat, 2 , which.min)
best_countries = countries_market_table[min_ind_market_table]
ticker_suffixes = lapply(best_countries , function(country){
res = market_table$'Yahoo! Finance Symbol'[ tolower(market_table$Country) == country ]
legit_ind = res != ''
res = res[legit_ind]
return(res)
})
names(ticker_suffixes) = countries_etf_table
ticker_suffixes
ticker_suffixes = find_ticker_suffixes(etf$market)
ticker_suffixes
find_ticker_suffixes = function(etf_vec){
countries_market_table = unique(tolower(market_table$Country))
countries_etf_table = unique(tolower(etf_vec))
dist_mat = stringdistmatrix(countries_market_table , countries_etf_table )
min_ind_market_table = apply(dist_mat, 2 , which.min)
best_countries = countries_market_table[min_ind_market_table]
ticker_suffixes = lapply(best_countries , function(country){
res = market_table$'Yahoo! Finance Symbol'[ tolower(market_table$Country) == country ]
legit_ind = res != ''
res = res[legit_ind]
return(res)
})
names(ticker_suffixes) = countries_etf_table
return(ticker_suffixes)
}
ticker_suffixes = find_ticker_suffixes(etf$market)
ticker_suffixes
find_nearest = function(vec1 , vec2){
res_ds = data.frame(vec1 = vec1 , vec2 = NA)
dist_mat = stringdistmatrix(vec1 , vec2 )
vec2_mins = apply(dist_mat, 2 , which.min)
best_vec2 = vec2[vec2_mins]
res_df$vec2 = best_vec2
return(res_df)
}
find_nearest = function(vec1 , vec2){
vec1 = tolower(vec1)
vec2 = tolower(vec2)
res_ds = data.frame(vec1 = vec1 , vec2 = NA)
dist_mat = stringdistmatrix(vec1 , vec2 )
vec2_mins = apply(dist_mat, 2 , which.min)
best_vec2 = vec2[vec2_mins]
res_df$vec2 = best_vec2
return(res_df)
}
find_nearest(unique(tolower(market_table$Country)) , unique(etf$market))
vec1 = unique(tolower(market_table$Country))
vec1
vec2 = etf$market
vec1 = tolower(vec1)
vec2 = tolower(vec2)
vec1
vec2
res_ds = data.frame(vec1 = vec1 , vec2 = NA)
res_ds
find_nearest = function(vec1 , vec2){
vec1 = tolower(vec1)
vec2 = tolower(vec2)
if( lengt(vec1) >= lengt(vec2) ){
longer = vec1
shorter = vec2
} else{
longer = vec2
shorter = vec1
}
res_ds = data.frame(shorter = shorter , longer = NA)
dist_mat = stringdistmatrix(longer , shorter )
longer_mins = apply(dist_mat, 2 , which.min)
best_longers = vec2[longer_mins]
res_df$longer = best_longers
return(res_df)
}
find_nearest(vec1 , vec2)
find_nearest = function(vec1 , vec2){
vec1 = tolower(vec1)
vec2 = tolower(vec2)
if( length(vec1) >= length(vec2) ){
longer = vec1
shorter = vec2
} else{
longer = vec2
shorter = vec1
}
res_ds = data.frame(shorter = shorter , longer = NA)
dist_mat = stringdistmatrix(longer , shorter )
longer_mins = apply(dist_mat, 2 , which.min)
best_longers = vec2[longer_mins]
res_df$longer = best_longers
return(res_df)
}
find_nearest(vec1 , vec2)
vec1 = tolower(vec1)
vec2 = tolower(vec2)
vec1
vec2
length(vec1) >= length(vec2)
longer = vec1
shorter = vec2
longer
shorter
res_ds = data.frame(shorter = shorter , longer = NA)
res_ds
find_nearest = function(vec1 , vec2){
vec1 = tolower(vec1)
vec2 = tolower(vec2)
vec1 = unique(vec1)
vec2 = unique(vec2)
if( length(vec1) >= length(vec2) ){
longer = vec1
shorter = vec2
} else{
longer = vec2
shorter = vec1
}
res_ds = data.frame(shorter = shorter , longer = NA)
dist_mat = stringdistmatrix(longer , shorter )
longer_mins = apply(dist_mat, 2 , which.min)
best_longers = vec2[longer_mins]
res_df$longer = best_longers
return(res_df)
}
find_nearest(vec1 , vec2)
vec1 = tolower(vec1)
vec2 = tolower(vec2)
vec1
vec2
vec1 = unique(vec1)
vec1
vec2
vec1 = unique(vec1)
vec2 = unique(vec2)
vec2
vec1
length(vec1)
length(vec1) >= length(vec2)
length(vec2)
longer = vec1
shorter = vec2
longer
shorter
res_ds = data.frame(shorter = shorter , longer = NA)
res_ds
dist_mat = stringdistmatrix(longer , shorter )
dist_mat
longer_mins = apply(dist_mat, 2 , which.min)
longer_mins
best_longers = vec2[longer_mins]
best_longers
best_longers = longer[longer_mins]
best_longers
res_df$longer = best_longers
best_longers
res_df
res_ds
find_nearest = function(vec1 , vec2){
vec1 = tolower(vec1)
vec2 = tolower(vec2)
vec1 = unique(vec1)
vec2 = unique(vec2)
if( length(vec1) >= length(vec2) ){
longer = vec1
shorter = vec2
} else{
longer = vec2
shorter = vec1
}
res_df = data.frame(shorter = shorter , longer = NA)
dist_mat = stringdistmatrix(longer , shorter )
longer_mins = apply(dist_mat, 2 , which.min)
best_longers = longer[longer_mins]
res_df$longer = best_longers
return(res_df)
}
find_nearest(vec1 , vec2)
name_match_vec =  deparse(substitute(match_vec))
match_vec
match_vec = market_table$Country
match_vec = etf$market
target_vec = market_table$Country
name_match_vec =  deparse(substitute(match_vec))
name_match_vec
name_match_vec =  deparse(substitute(match_vec))
name_target_vec =  deparse(substitute(target_vec))
target_vec = tolower(as.character(match_vec))
match_vec = tolower(as.character(target_vec))
find_nearest = function(target_vec , match_vec ){
name_match_vec =  deparse(substitute(match_vec))
name_target_vec =  deparse(substitute(target_vec))
target_vec = unique(tolower(as.character(match_vec)))
match_vec = unique(tolower(as.character(target_vec)))
res_df = data.frame(target_vec = target_vec , match_vec = NA)
dist_mat = stringdistmatrix(match_vec , target_vec )
match_vec_mins = apply(dist_mat, 2 , which.min)
match_vec_best = match_vec[match_vec_mins]
res_df$match_vec = match_vec_best
colnames(res_df) = c(name_target_vec , name_match_vec)
return(res_df)
}
find_nearest(etf$market , market_table$Country)
match_vec
target_vec
target_vec
target_vec = etf$market
target_vec
match_vec
target_vec = tolower(etf$market)
match_vec = market_table$Country
target_vec
match_vec
target_vec = unique(tolower(as.character(match_vec)))
match_vec = unique(tolower(as.character(target_vec)))
target_vec
target_vec = tolower(etf$market)
match_vec = market_table$Country
target_vec
match_vec
target_vec = unique(tolower(as.character(target_vec)))
match_vec = unique(tolower(as.character(match_vec)))
target_vec
match_vec
res_df = data.frame(target_vec = target_vec , match_vec = NA)
res_df
dist_mat = stringdistmatrix(match_vec , target_vec )
dist_mat
match_vec_mins = apply(dist_mat, 2 , which.min)
match_vec_mins
match_vec_best = match_vec[match_vec_mins]
match_vec_best
res_df$match_vec = match_vec_best
colnames(res_df) = c(name_target_vec , name_match_vec)
res_df
find_nearest = function(target_vec , match_vec ){
name_match_vec =  deparse(substitute(match_vec))
name_target_vec =  deparse(substitute(target_vec))
target_vec = unique(tolower(as.character(target_vec)))
match_vec = unique(tolower(as.character(match_vec)))
res_df = data.frame(target_vec = target_vec , match_vec = NA)
dist_mat = stringdistmatrix(match_vec , target_vec )
match_vec_mins = apply(dist_mat, 2 , which.min)
match_vec_best = match_vec[match_vec_mins]
res_df$match_vec = match_vec_best
colnames(res_df) = c(name_target_vec , name_match_vec)
return(res_df)
}
find_nearest(etf$market , market_table$Country)
matches = find_nearest(etf_vec , market_table$Country)
matches$'market_table$Country'
find_ticker_suffixes = function(etf_vec){
matches = find_nearest(etf_vec , market_table$Country)
ticker_suffixes = lapply(matches$'market_table$Country' , function(country){
res = market_table$'Yahoo! Finance Symbol'[ tolower(market_table$Country) == country ]
legit_ind = res != ''
res = res[legit_ind]
return(res)
})
names(ticker_suffixes) = countries_etf_table
return(ticker_suffixes)
}
ticker_suffixes = find_ticker_suffixes(etf$market)
ticker_suffixes
translate_fi_en(etf$Markkina)
ticker_suffixes
setwd(this_directory)
this_directory = '/home/yatzy/Dropbox/Kirjallista/Sijoittaminen/Code/'
setwd(this_directory)
setwd(this_directory)
base_path = '/home/yatzy/Dropbox/Projektit/Nordnet/Code/'
base_path
pem_filename
pem_filename = 'NEXTAPI_TEST_public.pem'
pem_filename
cert_location = paste(base_path , pem_filename , sep='' )
cert_location
cert_file = PKI.load.key(file = cert_location)
library(PKI)
cert_file = PKI.load.key(file = cert_location)
cert_file
cert = PKI.pubkey(cert_file)
shiny::runApp('Applications/tanne.pk')
install.packages('leaflet')
shiny::runApp('Applications/tanne.pk')
install.packages('ggmap')
shiny::runApp('Applications/tanne.pk')
install.packages('rCharts')
install_github('ramnathv/rCharts')
library(devtools)
install_github('ramnathv/rCharts')
shiny::runApp('Applications/tanne.pk')
install_github('rstudio/shinythemes')
shiny::runApp('Applications/tanne.pk')
